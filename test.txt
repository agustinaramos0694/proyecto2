using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using CTI.Common.Application.Results;
using CTI.Common.Contracts.Repositories;
using CTI.Organizations.Domain;
using CTI.Tenants.Application.CommandHandlers;
using CTI.Tenants.Application.Commands;
using CTI.Tenants.Application.Queries;
using CTI.Tenants.Application.QueryHandlers;
using CTI.Tenants.Domain;
using Dapr.Client;
using Moq;
using Xunit;
 
namespace CTI.Tenants.Tests
{
    public class TenantTest
    {
        [Fact]
        public async Task GetbyAllTenantsShouldAsync()
        {
            //Arrange
            var request = new GetAllTenantsQuery();
            var _mockRepository = new Mock<IReadonlyRepository<Tenant>>();
            var setup = _mockRepository.Setup(x => x.FindAsync(null, new System.Threading.CancellationToken()))
                .Returns(Task.FromResult(new CollectionResult<Tenant>()));
            var mapConfig = new MapperConfiguration(cfg => cfg.AddProfile(new MappingTestList()));
            var mapper = mapConfig.CreateMapper();
            //Act
            var handler = new GetAllTenantsQueryHandler(_mockRepository.Object, mapper);
            var valueResult = await handler.Handle(request, new System.Threading.CancellationToken()).ConfigureAwait(false);
 
            //Assert
            Assert.NotNull(valueResult);
        }
 
        [Fact]
        public async Task AddTenantShouldAsync()
        {
            //Arrange
            var mockUnitWork = new Mock<IUnitOfWork>();
            mockUnitWork.Setup(x => x.SaveEntitiesAsync(It.IsAny<System.Threading.CancellationToken>()));
            var organizationId = Guid.NewGuid().ToString();
            var countryId = Guid.NewGuid().ToString();
            var mockRepository = new Mock<IRepository<Tenant>>();
            mockRepository.SetupGet(x => x.UnitOfWork).Returns(mockUnitWork.Object);
            mockRepository.Setup(x => x.AddAsync(It.IsAny<Tenant>()))
                .Returns(Task.FromResult<Tenant>(new Tenant() { Id = "00000000-0000-0000-0000-000000000000"}));
 
            var mockRepositoryOrg = new Mock<IReadonlyRepository<Organization>>();
            mockRepositoryOrg.Setup(x => x.GetByIdAsync(organizationId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult<Organization>( new Organization() { Id = organizationId }));
 
            var mockRepositoryCountry = new Mock<IReadonlyRepository<Country>>();
            mockRepositoryCountry.Setup(x => x.GetByIdAsync(countryId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult<Country>(new Country() { Id = countryId }));
 
            var tenantId = Guid.NewGuid().ToString();
            var tenantCommand = new CreateTenantCommand()
            {
                Id = Guid.NewGuid().ToString(),
                Name = "UnitTest",
                Logo = "Logotest",
                ContactEmail = "unittest@unittest.com",
                ContactName = "test name",
                OrganizationId = organizationId,
                CountryId = countryId,
                Region = "North_America"
            };
            ////Act
            var handler = new CreateTenantCommandHandler(mockRepository.Object, mockRepositoryOrg.Object, mockRepositoryCountry.Object);
            var result = await handler.Handle(tenantCommand, new System.Threading.CancellationToken())
                .ConfigureAwait(false);
            ////Assert
            mockRepository.Verify(m => m.AddAsync(It.IsAny<Tenant>()), Times.Once);
            mockUnitWork.Verify(m => m.SaveEntitiesAsync(new System.Threading.CancellationToken()), Times.Once);
            Assert.NotNull(result);
        }
 
        [Fact]
        public async Task AddTenantShouldAsyncOrganizationError()
        {
            //Arrange
            var mockUnitWork = new Mock<IUnitOfWork>();
            mockUnitWork.Setup(x => x.SaveEntitiesAsync(It.IsAny<System.Threading.CancellationToken>()));
            var organizationId = Guid.NewGuid().ToString();
            var mockRepository = new Mock<IRepository<Tenant>>();
            var countryId = Guid.NewGuid().ToString();
            mockRepository.SetupGet(x => x.UnitOfWork).Returns(mockUnitWork.Object);
            mockRepository.Setup(x => x.AddAsync(It.IsAny<Tenant>()))
                .Returns(Task.FromResult<Tenant>(new Tenant() { Id = "00000000-0000-0000-0000-000000000000" }));
 
            var mockRepositoryOrg = new Mock<IReadonlyRepository<Organization>>();
            mockRepositoryOrg.Setup(x => x.GetByIdAsync(organizationId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult<Organization>(null));
 
            var mockRepositoryCountry = new Mock<IReadonlyRepository<Country>>();
            mockRepositoryCountry.Setup(x => x.GetByIdAsync(countryId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult<Country>(null));
 

            var tenantId = Guid.NewGuid().ToString();
            var tenantCommand = new CreateTenantCommand()
            {
                Id = Guid.NewGuid().ToString(),
                Name = "UnitTest",
                Logo = "Logotest",
                ContactEmail = "unittest@unittest.com",
                ContactName = "test name",
                OrganizationId = organizationId,
                CountryId = countryId,
                Region = "North_America"
            };
            var expectedMessage = "Organization not found";
 
            ////Act
            var handler = new CreateTenantCommandHandler(mockRepository.Object, mockRepositoryOrg.Object, mockRepositoryCountry.Object);
            var result = await handler.Handle(tenantCommand, new System.Threading.CancellationToken())
                .ConfigureAwait(false);
 
            ////Assert
            Assert.True(result.IsSuccess == false);
            Assert.Contains(expectedMessage, result.ValidationErrors.FirstOrDefault().ErrorMessage);
        }
 
        [Fact]
        public async Task UpdateAnyRecordbyIdShouldPutAsync()
        {
            //    //Arrange
            var tenantId = Guid.NewGuid().ToString();
            var organizationId = Guid.NewGuid().ToString();
            var mockUnitWork = new Mock<IUnitOfWork>();
            var countryId = Guid.NewGuid().ToString();
            mockUnitWork.Setup(x => x.SaveEntitiesAsync(It.IsAny<CancellationToken>()));
            var mockRepositoryReadOnly = new Mock<IReadonlyRepository<Tenant>>();
            var mockRepositoryWrite = new Mock<IWritableRepository<Tenant>>();
            mockRepositoryWrite.SetupGet(x => x.UnitOfWork).Returns(mockUnitWork.Object);
            mockRepositoryWrite.Setup(x => x.UpdateAsync(It.IsAny<Tenant>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
 
            var _mockRepositoryOrganization = new Mock<IReadonlyRepository<Organization>>();
            _mockRepositoryOrganization.Setup(x => x.GetByIdAsync(organizationId, It.IsAny<System.Threading.CancellationToken>()))
                    .Returns(Task.FromResult<Organization>(new Organization() { Id = organizationId }));
 
            var mockRepositoryCountry = new Mock<IReadonlyRepository<Country>>();
            mockRepositoryCountry.Setup(x => x.GetByIdAsync(organizationId, It.IsAny<System.Threading.CancellationToken>()))
                    .Returns(Task.FromResult<Country>(new Country() { Id = countryId }));
 
            mockRepositoryReadOnly.Setup(x => x.GetByIdAsync(tenantId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
            var updateTenantCommand = new UpdateTenantCommand()
            {
                Id = tenantId,
                Name = "UnitTest",
                Logo = "Logotest",
                ContactEmail = "unittest@unittest.com",
                ContactName = "test name",
                OrganizationId = organizationId,
                CountryId = countryId,
                Region = "Asia_Pacific"
            };
            var mockDaprClient = new Mock<DaprClient>();
 
            //Act
            var handler = new UpdateTenantCommandHandler(mockRepositoryReadOnly.Object, mockRepositoryWrite.Object, mockRepositoryCountry.Object, _mockRepositoryOrganization.Object);
            var result = await handler.Handle(updateTenantCommand, new CancellationToken()).ConfigureAwait(false);
 
            mockRepositoryWrite.Verify(m => m.UpdateAsync(It.IsAny<Tenant>()), Times.Once);
            mockUnitWork.Verify(m => m.SaveEntitiesAsync(new CancellationToken()), Times.Once);
            //Assert
            Assert.NotNull(result);
 
        }
 
        [Fact]
        public async Task UpdateAnyRecordbyIdShouldPutAsyncWithOrganizationError()
        {
            //    //Arrange
            var tenantId = Guid.NewGuid().ToString();
            var organizationId = Guid.NewGuid().ToString();
            var countryId = Guid.NewGuid().ToString();
            var mockUnitWork = new Mock<IUnitOfWork>();
            mockUnitWork.Setup(x => x.SaveEntitiesAsync(It.IsAny<CancellationToken>()));
            var mockRepositoryReadOnly = new Mock<IReadonlyRepository<Tenant>>();
            var mockRepositoryWrite = new Mock<IWritableRepository<Tenant>>();
            mockRepositoryWrite.SetupGet(x => x.UnitOfWork).Returns(mockUnitWork.Object);
            mockRepositoryWrite.Setup(x => x.UpdateAsync(It.IsAny<Tenant>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
 
            var _mockRepositoryOrganization = new Mock<IReadonlyRepository<Organization>>();
            _mockRepositoryOrganization.Setup(x => x.GetByIdAsync(organizationId, It.IsAny<System.Threading.CancellationToken>()))
                    .Returns(Task.FromResult<Organization>(null));
 

            var mockRepositoryCountry = new Mock<IReadonlyRepository<Country>>();
            mockRepositoryCountry.Setup(x => x.GetByIdAsync(countryId, It.IsAny<System.Threading.CancellationToken>()))
                    .Returns(Task.FromResult<Country>(null));
 
            mockRepositoryReadOnly.Setup(x => x.GetByIdAsync(tenantId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
            var updateTenantCommand = new UpdateTenantCommand()
            {
                Id = tenantId,
                Name = "UnitTest",
                Logo = "Logotest",
                ContactEmail = "unittest@unittest.com",
                ContactName = "test name",
                OrganizationId = organizationId,
                Region = "Asia_Pacific"
            };
            var expectedMessage = "Organization not found";
 
            //Act
            var handler = new UpdateTenantCommandHandler(mockRepositoryReadOnly.Object, mockRepositoryWrite.Object, mockRepositoryCountry.Object, _mockRepositoryOrganization.Object);
            var result = await handler.Handle(updateTenantCommand, new CancellationToken()).ConfigureAwait(false);
 
            ////Assert
            Assert.True(result.IsSuccess == false);
            Assert.Contains(expectedMessage, result.ValidationErrors.FirstOrDefault().ErrorMessage);
        }
 
        [Fact]
        public async Task DisableAnyRecordbyIdShouldPostAsync()
        {
            //    //Arrange
            var tenantId = Guid.NewGuid().ToString();
            var organizationId = Guid.NewGuid().ToString();
            var countryId = Guid.NewGuid().ToString();
            var mockUnitWork = new Mock<IUnitOfWork>();
            mockUnitWork.Setup(x => x.SaveEntitiesAsync(It.IsAny<CancellationToken>()));
            var mockRepositoryReadOnly = new Mock<IReadonlyRepository<Tenant>>();
            var mockRepositoryWrite = new Mock<IWritableRepository<Tenant>>();
            mockRepositoryWrite.SetupGet(x => x.UnitOfWork).Returns(mockUnitWork.Object);
            mockRepositoryWrite.Setup(x => x.UpdateAsync(It.IsAny<Tenant>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
 

            mockRepositoryReadOnly.Setup(x => x.GetByIdAsync(tenantId, It.IsAny<System.Threading.CancellationToken>()))
                .Returns(Task.FromResult(new Tenant() { Id = tenantId }));
            var disableTenantCommand = new DisableTenantCommand()
            {
                Id = tenantId
            };
 
            //Act
            var handler = new DisableTenantCommandHandler(mockRepositoryReadOnly.Object, mockRepositoryWrite.Object);
            var result = await handler.Handle(disableTenantCommand, new CancellationToken()).ConfigureAwait(false);
 
            mockRepositoryWrite.Verify(m => m.UpdateAsync(It.IsAny<Tenant>()), Times.Once);
            mockUnitWork.Verify(m => m.SaveEntitiesAsync(new CancellationToken()), Times.Once);
            //Assert
            Assert.NotNull(result);
 
        }
 
        /// GetByIdAsync.
        /// </summary>
        /// <returns>Task.</returns>
        [Fact]
        public async Task GetByIdAsync()
        {
            // Arrange
            var mockRepository = new Mock<IRepository<Tenant>>();
            mockRepository.Setup(x => x.GetByIdAsync("00000000-0000-0000-0000-000000000001", new System.Threading.CancellationToken())).Returns(Task.FromResult<Tenant>(new Tenant() { Id = "00000000-0000-0000-0000-000000000001" }));
            var mapConfig = new MapperConfiguration(cfg => cfg.AddProfile(new MappingTest()));
            var mapper = mapConfig.CreateMapper();
 
            // Act
            var handler = new GetTenantByIdQueryHandler(mockRepository.Object, mapper);
            var request = new GetTenantByIdQuery() { Id = "00000000-0000-0000-0000-000000000001" };
            var tenant = await handler.Handle(request, new System.Threading.CancellationToken()).ConfigureAwait(false);
 
            // Assert
            Assert.NotNull(tenant);
            Assert.True(tenant.Result.Id == "00000000-0000-0000-0000-000000000001");
        }
    }
}

